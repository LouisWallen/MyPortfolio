abline(v = 1)
p + geom_point(aes(y = data$sheight))
p = ggplot(data, aes(x = data$fheight))
p + geom_point(aes(y = data$sheight))
abline(v = 60)
abline(v = 60)
p = ggplot(data, aes(x = data$fheight))
p = ggplot(data, aes(x = data$fheight))
p + geom_point(aes(y = data$sheight))
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "pink", lwd = 2, add = TRUE)
pnorm(2.1)
1-pnorm(2.1)
pnorm(2,5,9)
curve(dnorm(5,9))
dnorm
dnorm(,5,9)
dnorm(mtcars$mpg,5,9)
curve(dnorm(mtcars$mpg,5,9))
pnorm
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(y = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
pnorm
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "pink", lwd = 2, add = TRUE)
pnorm
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8)
polygon(x = c(sequence, 0.8, -2), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence))), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
rerere
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
dsds
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
dsdsx
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
d
curve(Dnorm(x), xlim = c(-2, 2), ylab = ", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(Dnorm(x), xlim = c(-2, 2), ylab = ", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(Dnorm(x), xlim = c(-2, 2), ylab = ", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
curve(dnorm(x), xlim = c(-2, 2), ylab = "", axes = FALSE)
abline(h = 0)
sequence = seq(-2, 0.8, 0.1)
polygon(x = c(sequence, 0.8, -2), y = c(dnorm(c(sequence)), 0, 0), col = "purple")
axis(1, at = c(-2, -1, 0, 0.8, 1, 2), pos = 0)
sds
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "khaki1", lwd = 2, add = TRUE)
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "deeppink1", lwd = 2, add = TRUE)
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "gray1", lwd = 2, add = TRUE)
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "darkturquise1", lwd = 2, add = TRUE)
hist(mtcars$wt, prob = F)
m = mean(mtcars$wt)
sd = sd(mtcars$wt)
curve(dnorm(x, mean = m, sd = sd), col = "darkturquoise1", lwd = 2, add = TRUE)
help(polygon)
curve(dnorm(x))
curve(dnorm(x), xlim=c(-2,2))
curve(dnorm(x, -5, 6))
curve(dnorm(x, -5, 6), xlim = c(-10,10))
data = Orange
data
cor(Orange$circumference, Orange$age)
> L=lm(CO2$uptake~CO2$conc)
> plot(CO2$conc, L$residuals, xlab = "conc", ylab = "Residuals")
> abline(h = 0, col = "blue7")
blue7
abline(h = 0)
L = abline(h = 0)
L=lm(CO2$uptake~CO2$conc)
plot(CO2$conc, L$residuals, xlab = "conc", ylab = "Residuals")
abline(h = 0, col = "blue7")
ToothGrowth
cor(ToothGrowth$len, ToothGrowth$dose)
plot(CO2$conc,CO2$uptake)
help("set.seed")
set.seed(1)
sample(c("H, T"), 1, replace = T)
sample()
help(sample)
sample(c("H, T"), 5, replace = T)
sample(c("H", "T"), 5, replace = T)
sample(c("H", "T"), 5, replace = F)
sample(c("H", "T"), 2, replace = F)
sample(c("H", "T"), 2, replace = F)
sample(c("H", "T"), 2, replace = F)
sample(c("H", "T"), 2, replace = t)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
set.seed(3)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
set.seed(1)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
set.seed(3)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 2, replace = T)
sample(c("H", "T"), 19, replace = T)
sample(c("H", "T"), 19, replace = T, prob(c(0.9, 0.1)))
sample(c("H", "T"), 19, replace = T, prob((0.9, 0.1)))
sample(c("H", "T"), 19, replace = T, prob(0.9, 0.1))
sample(c("H", "T"), 19, replace = T, prob=c(0.9, 0.1))
sample(c("H", "T"), 19, replace = T, prob=c(0.7, 0.3))
sample1 = sample(c("H", "T"), 19, replace = T, prob=c(0.7, 0.3))
table(sample1)
table(sample1)/10
table(sample1)/10
table(sample1)/10
table(sample1)/10
table(sample1)/19
table(sample1)/19
sample1 = sample(c("H", "T"), 10000, replace = T, prob=c(0.7, 0.3))
table(sample1)/10000
replicate(10, sample(c("H", "T"), 1 , replace = T))
replicate(10, sample(c("H", "T"), 1 , replace = T))
replicate(10, sample(c("H", "T"), 1 , replace = T))
rbinom(n = 10, 1, 0.5)
rbinom(n = 10, "H", 0.5)
rbinom(n = 10, 45, 0.5)
rbinom(n = 10, 45, 0.5)
rbinom(n = 10, 45, 0.5)
rbinom(n = 10, 45, 0.5)
help("rbinom")
help("rbinom")
rbinom(n = 10, 45, 0.5)
rbinom(n = 10, 2, 0.5)
rbinom(n = 10, 2, 0.1)
rbinom(n = 10, 2, 0.1)
rbinom(n = 10, 2, 0.1)
rbinom(n = 10, 2, 0.1)
rbinom(n = 10, 2, 0.1)
rbinom(n = 10, 2, 0.9)
set.seed(1)
sample(c(1:6), 1, replace = T, prob = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
rbinom(n = 10, 2, 0.9)
set.seed(1)
sample(c(1:6), 1, replace = T, prob = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
set.seed(1)
sample(c(1:6), 1, replace = T, prob = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
set.seed(1)
sample(c(1:6), 1, replace = T, prob = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
set.seed(1)
sample(c(1:6), 1, replace = T, prob = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
sample(1:4, size = 10, replace = TRUE)
box=c(0,1)
m = 10 * mean(box)
s = sqrt(10) * sd(box) * (sqrt(1)/sqrt(2))
threshold1 = 5
threshold2 = 6
xlimits1 = seq(round(-4 * s + m, digit = -1), round(4 * s + m, digit = -1),
1)
curve(dnorm(x, mean = m, sd = s), m - 4 * s, m + 4 * s, col = "purple", lwd = 2,
xlab = "", ylab = "", main = "P(sum is between 4 and 5)", axes = F)
sequence <- seq(threshold1, threshold2, 0.1)
polygon(x = c(sequence, threshold2, threshold1), y = c(dnorm(c(sequence), m,
s), 0, 0), col = "green")
axis(1, xlimits1, line = 1, col = "black", col.ticks = "black", col.axis = "black")
mtext("sum of box", 1, line = 1, at = -2, col = "black")
axis(1, xlimits1, labels = round((xlimits1 - m)/s, 2), line = 3.3, col = "indianred1",
col.ticks = "indianred1", col.axis = "indianred1")
mtext("Z score", 1, line = 3.3, at = -2, col = "indianred1")
install.packages("DiagrammeR")
box=c(0,1)
m = 10 * mean(box)
s = sqrt(10) * sd(box) * (sqrt(1)/sqrt(2))
threshold1 = 5
threshold2 = 6
xlimits1 = seq(round(-4 * s + m, digit = -1), round(4 * s + m, digit = -1),
1)
curve(dnorm(x, mean = m, sd = s), m - 4 * s, m + 4 * s, col = "purple", lwd = 2,
xlab = "", ylab = "", main = "P(sum is between 4 and 5)", axes = F)
sequence <- seq(threshold1, threshold2, 0.1)
polygon(x = c(sequence, threshold2, threshold1), y = c(dnorm(c(sequence), m,
s), 0, 0), col = "green")
axis(1, xlimits1, line = 1, col = "black", col.ticks = "black", col.axis = "black")
mtext("sum of box", 1, line = 1, at = -2, col = "black")
axis(1, xlimits1, labels = round((xlimits1 - m)/s, 2), line = 3.3, col = "indianred1",
col.ticks = "indianred1", col.axis = "indianred1")
mtext("Z score", 1, line = 3.3, at = -2, col = "indianred1")
library("DiagrammeR")
grViz("
digraph CFA {
# All
node [fontname = Helvetica, fontcolor = White]
# Box
node [shape = box, style=filled, color=SteelBlue4, width=2 label='0  1'][fillcolor = SteelBlue4]
a ;
# Sample
node [shape = circle, style=filled, color=IndianRed, width=0.5, label='-'][fillcolor = IndianRed]
b ;
# Draws
a -> b [fontname = Helvetica,label = '10 draws',fontsize=8]
b -> a  [fontname = Helvetica,color=grey,arrowsize = 0.5]
}
")
bac = read.csv("http://www.maths.usyd.edu.au/u/UG/JM/DATA1001/r/current/data/AlcoholConcentration.csv")
str(bac)
Time = bac$TimeHours
Conc = bac$BloodAlcoholConcentration
plot(Time, Conc, xlab="Time (hr)", ylab="Conc (units)", pch=16, cex.lab=1.3, col="red")
Time = bac$ï..TimeHours
Conc = bac$BloodAlcoholConcentration
plot(Time, Conc, xlab="Time (hr)", ylab="Conc (units)", pch=16, cex.lab=1.3, col="red")
bac = read.csv("http://www.maths.usyd.edu.au/u/UG/JM/DATA1001/r/current/data/AlcoholConcentration.csv")
str(bac)
Time = bac$ï..TimeHours
Conc = bac$BloodAlcoholConcentration
plot(Time, Conc, xlab="Time (hr)", ylab="Conc (units)", pch=16, cex.lab=1.3, col="red")
plot(Time, Conc, xlab="Time (hr)", ylab="Conc (units)", pch=16, cex.lab=1.3, col="red")
abline(a=0.100,b=-0.015, col = "darkgreen", lwd = 3)
# Plot a horizontal line at 0.05
abline(h=0.05, col = "purple", lwd = 1, lty=2)
par(mfrow=c(1,2))
# Scatter plot
plot(Time, Conc, xlab="Time (hr)", ylab="Conc (units)", pch=16, cex.lab=1.3, col="red")
abline(a=0.100,b=-0.015, col = "darkgreen", lwd = 3)
# Residual plot
predictedvalues = 0.100-0.015*Time
residuals = Conc - predictedvalues
plot(Time, residuals, ylab = "residuals")
abline(h = 0, col="blue")
bic = read.csv("http://www.maths.usyd.edu.au/u/UG/JM/DATA1001/r/current/data/MethConcentration.csv")
str(bic)
Time =  bic$TimeHours
Conc = bic $BloodConcentration
# Insert your own code
# Insert your own code
# Insert your own code
# Insert your own code
# Quadratic model
Time2 = Time^2
quad.model = lm(Conc ~ Time + Time2)
Time =  bic$TimeHours
Conc = bic $BloodConcentration
# Insert your own code
View(bic)
Time =  bic$ï..TimeHours
Conc = bic $BloodConcentration
plot(Time, Conc)
Time =  bic$ï..TimeHours
Conc = bic $BloodConcentration
plot(Time, Conc, pch = 16, cex.lab = 1.3)
Time =  bic$ï..TimeHours
Conc = bic $BloodConcentration
plot(Time, Conc, pch = 16)
Time =  bic$ï..TimeHours
Conc = bic $BloodConcentration
plot(Time, Conc, pch = 16, col = "IndianRed")
abline(lm(Conc~Time))
Time =  bic$ï..TimeHours
Conc = bic $BloodConcentration
plot(Time, Conc, pch = 16, col = "IndianRed")
abline(lm(Conc~Time))
plot.new
abline(lm(Conc~Time))
plot.new()
abline(lm(Conc~Time))
lm(Conc~Time)
lm(Conc~Time)
abline(a = 32.8337, b = -0.7188, col = "lightgreen")
lm(Conc~Time)
abline(a = 32.8337, b = -0.7188, col = "lightgreen", lwd = 3)
lm(Conc~Time)
plot(Time, Conc, pch = 16, col = "IndainRed")
lm(Conc~Time)
plot(Time, Conc, pch = 16, col = "IndianRed")
abline(a = 32.8337, b = -0.7188, col = "lightgreen", lwd = 3)
cor(Time, Conc)
plot(lm(Conc~Time)$residuals)
plot(lm(Conc~Time)$residuals, col = "IndianRed", pch = 16)
plot(lm(Conc~Time)$residuals, col = "IndianRed", pch = 16, xlab = "Time", ylab = "Residuals")
plot(lm(Conc~Time)$residuals, col = "IndianRed", pch = 16, xlab = "Time", ylab = "Residuals")
abline(h=0)
plot(lm(Conc~Time)$residuals, col = "IndianRed", pch = 16, xlab = "Time", ylab = "Residuals")
abline(h=0, col = "lightgreen", lwd = 1)
plot(lm(Conc~Time)$residuals, col = "IndianRed", pch = 16, xlab = "Time", ylab = "Residuals")
abline(h=0, col = "lightgreen", lwd = 1, lty=2)
plot(Time,Conc)
curve(47*exp(-0.06*x),3,50,add=T, col = "IndianRed", lty = 2)
getwd
getwd()
setwd("C:/Users/NM/Desktop/UNI_ACAD/DATA 1001/Project3/data/")
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("Data.csv")
data = read.csv("Data.csv")
data = read.csv("Data.csv")
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 2001/Project3/data/Data.csv")
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 2001/Project3/data/Data.csv")
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 2001/Project3/data/Data.csv")
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data
View(data_dom)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == Domestic), ]
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
View(data_dom)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = data[which(data$Dom.Int == 'International'), ]
View(data_int)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = data[which(data$Dom.Int == 'International'), ]
View(data_int)
data_int = data[which(data$Dom.Int == 'International'), ]$Marks
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = data[which(data$Dom.Int == 'International'), ]$Marks
View(data_int)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = (data[which(data$Dom.Int == 'International'), ])$Marks
View(data_int)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = data[which(data$Dom.Int == 'International'), ]
View(data_int)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = (data[which(data$Dom.Int == 'International'), ])
View(data_int)
help("subset")
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = subset(data, Dom.Int == 'International', select = Marks, Unit.of.Study.Identifier)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = subset(data, Dom.Int == 'International', select = c(Marks, Unit.of.Study.Identifier))
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = data[which(data$Dom.Int == 'Domestic'), ]
data_int = subset(data, Dom.Int == 'International', select = c(Mark, Unit.of.Study.Identifier))
View(data_int)
data = read.csv("C:/Users/NM/Desktop/UNI_ACAD/Data 1001/Project3/data/Data.csv")
data_dom = subset(data, Dom.Int == 'Domestic', select = c(Mark, Unit.of.Study.Identifier))
data_int = subset(data, Dom.Int == 'International', select = c(Mark, Unit.of.Study.Identifier))
View(data_int)
View(data_dom)
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'Unit A'), ]
data_dom_A
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_dom_A
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A
help("t.test")
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(data_dom_A, data_int_A, alternative = 'greater')
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(data_dom_A, data_int_A, alternative = "greater")
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(data_dom_A, data_int_A)
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(as.numeric(data_dom_A), as.numeric(data_int_A))
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(data_dom_A, data_int_A)
data_dom_A = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT A'), ]
data_int_A = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT A'), ]
t.test(data_dom_A$Mark, data_int_A$Mark, alternative = "greater")
data_dom_B = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT B'), ]
data_int_B = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT B'), ]
t.test(data_dom_B$Mark, data_int_B$Mark, alternative = "greater")
data_dom_B = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT B'), ]
data_dom_B
data_int_B = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT B'), ]
t.test(data_dom_B$Mark, data_int_B$Mark, alternative = "greater")
data_dom_B = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT B'), ]
View(data_dom_B)
data_int_B = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT B'), ]
t.test(data_dom_B$Mark, data_int_B$Mark, alternative = "greater")
View(data_int_B)
View(data_dom_B)
View(data_int)
data_dom
data_dom$Unit.of.Study.Identifier
data_dom_C = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT C'), ]
data_int_C = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT C'), ]
t.test(data_dom_C$Mark, data_int_C$Mark, alternative = "greater")
data_dom_G = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT G'), ]
data_int_G = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT G'), ]
t.test(data_dom_G$Mark, data_int_G$Mark, alternative = "greater")
data_dom_H = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT H'), ]
data_int_H = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT H'), ]
t.test(data_dom_H$Mark, data_int_H$Mark, alternative = "greater")
data_dom_K = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT K'), ]
data_int_K = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT K'), ]
t.test(data_dom_K$Mark, data_int_K$Mark, alternative = "greater")
data_dom_M = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT M'), ]
data_int_M = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT M'), ]
t.test(data_dom_M$Mark, data_int_M$Mark, alternative = "greater")
data_dom_O = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT O'), ]
data_int_O = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT O'), ]
t.test(data_dom_O$Mark, data_int_O$Mark, alternative = "greater")
data_dom_Q = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT Q'), ]
data_int_Q = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT Q'), ]
t.test(data_dom_Q$Mark, data_int_Q$Mark, alternative = "greater")
data_dom_S = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT S'), ]
data_int_S = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT S'), ]
t.test(data_dom_S$Mark, data_int_S$Mark, alternative = "greater")
data_dom_T = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT T'), ]
data_int_T = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT T'), ]
t.test(data_dom_T$Mark, data_int_T$Mark, alternative = "greater")
data_dom_V = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT V'), ]
data_int_V = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT V'), ]
t.test(data_dom_V$Mark, data_int_V$Mark, alternative = "greater")
data_dom_W = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT W'), ]
data_int_W = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT W'), ]
t.test(data_dom_W$Mark, data_int_W$Mark, alternative = "greater")
data_dom_X = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT X'), ]
data_int_X = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT X'), ]
t.test(data_dom_X$Mark, data_int_X$Mark, alternative = "greater")
data_dom_Y = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT Y'), ]
data_int_Y = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT Y'), ]
t.test(data_dom_Y$Mark, data_int_Y$Mark, alternative = "greater")
data_dom_Z = data_dom[which(data_dom$Unit.of.Study.Identifier == 'UNIT Z'), ]
data_int_Z = data_int[which(data_int$Unit.of.Study.Identifier == 'UNIT Z'), ]
t.test(data_dom_Z$Mark, data_int_Z$Mark, alternative = "greater")
